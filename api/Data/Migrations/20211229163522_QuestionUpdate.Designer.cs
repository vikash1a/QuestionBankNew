// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

namespace api.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211229163522_QuestionUpdate")]
    partial class QuestionUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("api.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionA")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionB")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionC")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionD")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuesitonText")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionBankId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionBankId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("api.Entities.QuestionBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionBanks");
                });

            modelBuilder.Entity("api.Entities.QuestionPaper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionPaper");
                });

            modelBuilder.Entity("api.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<int>("QuestionBankId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api.Entities.Question", b =>
                {
                    b.HasOne("api.Entities.QuestionBank", "QuestionBank")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionBank");
                });

            modelBuilder.Entity("api.Entities.QuestionBank", b =>
                {
                    b.HasOne("api.Entities.User", "User")
                        .WithMany("QuestionBanks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Entities.QuestionPaper", b =>
                {
                    b.HasOne("api.Entities.User", "User")
                        .WithMany("QuestionPapers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Entities.QuestionBank", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("api.Entities.User", b =>
                {
                    b.Navigation("QuestionBanks");

                    b.Navigation("QuestionPapers");
                });
#pragma warning restore 612, 618
        }
    }
}
